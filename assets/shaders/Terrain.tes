#version 450 core

layout(quads, equal_spacing, ccw) in;

uniform sampler2D texture_map;
uniform int has_texture;

in vec4 tes_pos_light[];
in vec3 tes_pos_model[];
in vec2 tes_texCoords[];

out vec4 frag_pos_light;
out vec3 frag_pos;
out vec3 normal;
out vec2 frag_texCoords;

vec2 interpolate(vec2 uv0, vec2 uv1, vec2 uv2, vec2 uv3)
{
    vec2 a = mix(uv0, uv1, gl_TessCoord.x);
    vec2 b = mix(uv2, uv3, gl_TessCoord.x);
    return mix(a, b, gl_TessCoord.y);
}

vec3 interpolate(vec3 c0, vec3 c1, vec3 c2, vec3 c3)
{
    vec3 a = mix(c0, c1, gl_TessCoord.x);
    vec3 b = mix(c2, c3, gl_TessCoord.x);
    return mix(a, b, gl_TessCoord.y);
}

vec4 interpolate(vec4 v0, vec4 v1, vec4 v2, vec4 v3)
{
    vec4 a = mix(v0, v1, gl_TessCoord.x);
    vec4 b = mix(v2, v3, gl_TessCoord.x);
    return mix(a, b, gl_TessCoord.y);
}

void main()
{
    vec4 p00 = gl_in[0].gl_Position;
    vec4 p01 = gl_in[1].gl_Position;
    vec4 p10 = gl_in[2].gl_Position;
    vec4 p11 = gl_in[3].gl_Position;

    vec4 p0 = p01 - p00;
    vec4 p1 = p10 - p00;
    vec4 n = normalize(vec4(cross(p0.xyz, p1.xyz), 0.0));

    normal = n.xyz;
    
    frag_texCoords = interpolate(tes_texCoords[0], tes_texCoords[1], 
                                 tes_texCoords[2], tes_texCoords[2]);


    frag_pos_light = interpolate(tes_pos_light[0], tes_pos_light[1], 
                                 tes_pos_light[2], tes_pos_light[3]);
    
    frag_pos = interpolate(tes_pos_model[0], tes_pos_model[1], 
                           tes_pos_model[2], tes_pos_model[3]);
    
    vec4 pos = interpolate(p00, p01, p10, p11);
    gl_Position = pos;
}